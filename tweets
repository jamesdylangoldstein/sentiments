#!/usr/bin/env python3

import html
import os
import sys
import plotly
import socket

from analyzer import Analyzer
from termcolor import colored
from twython import Twython
from twython import TwythonAuthError, TwythonError, TwythonRateLimitError
from nltk.tokenize import TweetTokenizer

def main():

    # ensure proper usage
    if len(sys.argv) != 2:
        sys.exit("Usage: ./smile username")

    # absolute paths to lists
    positives = os.path.join(sys.path[0], "positive-words.txt")
    negatives = os.path.join(sys.path[0], "negative-words.txt")

    # instantiate analyzer
    analyzer = Analyzer(positives, negatives)

    # get the tweets
    user_name = sys.argv[1].replace("@", "")
    tweets = get_user_timeline(user_name, 50)

    # find out hte number of tweets
    number_of_tweets = len(tweets)

    # break the tweets up
    tokens = []
    tokenizer = TweetTokenizer()
    
    #for each tweet and all of it's individual tokens, add that to a list of tokens
    for i in range(0, number_of_tweets):
        tokens += tokenizer.tokenize(tweets[i])

    # analyze user's tweets
    score = analyzer.analyze(tokens)
    
    if score > 0.0:
        print(colored(":)", "green"))
    elif score < 0.0:
        print(colored(":(", "red"))
    else:
        print(colored(":|", "yellow"))

def chart(positive, negative, neutral):
    """Return a pie chart for specified sentiments as HTML."""

    # offline plot
    # https://plot.ly/python/pie-charts/
    # https://plot.ly/python/reference/#pie
    figure = {
        "data": [
            {
                "labels": ["positive", "negative", "neutral"],
                "hoverinfo": "none",
                "marker": {
                    "colors": [
                        "rgb(0,255,00)",
                        "rgb(255,0,0)",
                        "rgb(255,255,0)"
                    ]
                },
                "type": "pie",
                "values": [positive, negative, neutral]
            }
        ],
        "layout": {
            "showlegend": True
            }
    }
    return plotly.offline.plot(figure, output_type="div", show_link=False, link_text=False)

def get_user_timeline(screen_name, count=200):
    """Return list of most recent tweets posted by screen_name."""

    # ensure count is valid
    if count < 1 or count > 200:
        raise RuntimeError("invalid count")

    # ensure environment variables are set
    if not os.environ.get("API_KEY"):
        raise RuntimeError("API_KEY not set")
    if not os.environ.get("API_SECRET"):
        raise RuntimeError("API_SECRET not set")

    # get screen_name's most recent tweets
    # https://dev.twitter.com/rest/reference/get/users/lookup
    # https://dev.twitter.com/rest/reference/get/statuses/user_timeline
    # https://github.com/ryanmcgrath/twython/blob/master/twython/endpoints.py
    try:
        twitter = Twython(os.environ.get("API_KEY"), os.environ.get("API_SECRET"))
        user = twitter.lookup_user(screen_name=screen_name)
        if user[0]["protected"]:
            print("Error: A!")
            return None
        tweets = twitter.get_user_timeline(screen_name=screen_name, count=count)
        return [html.unescape(tweet["text"].replace("\n", " ")) for tweet in tweets]
    except TwythonAuthError:
        raise RuntimeError("invalid API_KEY and/or API_SECRET") from None
    except TwythonRateLimitError:
        raise RuntimeError("you've hit a rate limit") from None
    except TwythonError:
        print("Error: B!")
        return None
        
if __name__ == "__main__":
    main()
